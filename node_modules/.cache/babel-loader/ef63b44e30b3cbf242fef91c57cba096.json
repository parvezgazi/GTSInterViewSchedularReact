{"ast":null,"code":"/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nexport function createElement(tagName, properties) {\n  //tslint:disable-next-line\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    if (ele && classList) {\n      for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n        var className = classList_1[_b];\n        if (isObject(ele)) {\n          var curClass = getValue('attributes.className', ele);\n          if (isNullOrUndefined(curClass)) {\n            setValue('attributes.className', className, ele);\n          } else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n            setValue('attributes.className', curClass + ' ' + className, ele);\n          }\n        } else {\n          if (!ele.classList.contains(className)) {\n            ele.classList.add(className);\n          }\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    if (ele && classList) {\n      var flag = isObject(ele);\n      var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n      if (canRemove) {\n        for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n          var className = classList_2[_b];\n          if (flag) {\n            var classes_1 = getValue('attributes.className', ele);\n            var classArr = classes_1.split(' ');\n            var index = classArr.indexOf(className);\n            if (index !== -1) {\n              classArr.splice(index, 1);\n            }\n            setValue('attributes.className', classArr.join(' '), ele);\n          } else {\n            ele.classList.remove(className);\n          }\n        }\n      }\n    }\n  }\n  return elements;\n}\nfunction getClassList(classes) {\n  var classList = [];\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n  //tslint:disable:no-any\n  if (isObject(toElement)) {\n    VirtualDOM.prepend(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n  if (isObject(toElement)) {\n    VirtualDOM.append(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n    toElement.appendChild(docFrag);\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nexport function detach(element) {\n  if (isObject(element)) {\n    return VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    if (parentNode) {\n      return parentNode.removeChild(element);\n    }\n  }\n}\n//tslint: enable:no-any\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nexport function remove(element) {\n  if (isObject(element)) {\n    VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n  }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n  if (ele) {\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      if (isObject(ele)) {\n        var iKey = key;\n        if (key === 'tabindex') {\n          iKey = 'tabIndex';\n        }\n        ele.attributes[iKey] = attributes[key];\n      } else {\n        ele.setAttribute(key, attributes[key]);\n      }\n    }\n  }\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  if (isObject(context) && needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: false\n    });\n  } else {\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n  }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  if (isObject(context) && !needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: true\n    });\n  } else {\n    selector = querySelectId(selector);\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n  }\n}\nfunction querySelectId(selector) {\n  var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    var idList = selector.split(',');\n    for (var i = 0; i < idList.length; i++) {\n      var list = idList[i].split(' ');\n      for (var j = 0; j < list.length; j++) {\n        if (list[j].indexOf('#') > -1) {\n          if (!list[j].match(/\\[.*\\]/)) {\n            var splitId = list[j].split('#');\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              var setId = list[j].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[j] = setId.join('.');\n            }\n          }\n        }\n      }\n      idList[i] = list.join(' ');\n    }\n    return idList.join(',');\n  }\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nexport function closest(element, selector) {\n  var el = element;\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n    el = el.parentNode;\n  }\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[property] = value;\n    }\n    attrVal = value;\n  }\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    if (isObject(element)) {\n      // tslint:disable-next-line:no-any\n      VirtualDOM.setStyleAttribute(element, attrs);\n    } else {\n      Object.keys(attrs).forEach(function (key) {\n        // tslint:disable-next-line:no-any\n        element.style[key] = attrs[key];\n      });\n    }\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nexport function matches(element, selector) {\n  //tslint:disable-next-line\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n  if (isObject(ele)) {\n    if (innerHTML === '') {\n      ele.children = [];\n    } else {\n      var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n      if (res.length) {\n        VirtualDOM.assignParent(res, ele);\n        ele.children = res;\n      }\n    }\n  } else {\n    ele.innerHTML = innerHTML;\n  }\n}\n//tslint:disable-next-line\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    // tslint:disable-next-line:no-any\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    } else {\n      return {\n        tagName: element.tagName,\n        attributes: element.attributes\n      };\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"names":["EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","VirtualDOM","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","_i","_a","length","ele","_b","classList_1","curClass","RegExp","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","split","index","indexOf","splice","join","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","iKey","select","selector","context","needsVDOM","vDomSelector","selectAll","querySelectId","querySelector","nodeList","charRegex","match","idList","i","list","j","splitId","setId","replace","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","isObj","getAttribute","toString","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","children","res","ConvertHTMLToJSon","assignParent","containsClass","cloneNode","deep"],"sources":["C:/Users/DELL/Downloads/GTSInterviewSchedulerComponent-main/GTSInterviewSchedulerComponent-main/node_modules/@syncfusion/ej2-buttons/node_modules/@syncfusion/ej2-base/src/dom.js"],"sourcesContent":["/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nexport function createElement(tagName, properties) {\n    //tslint:disable-next-line\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        if (ele && classList) {\n            for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n                var className = classList_1[_b];\n                if (isObject(ele)) {\n                    var curClass = getValue('attributes.className', ele);\n                    if (isNullOrUndefined(curClass)) {\n                        setValue('attributes.className', className, ele);\n                    }\n                    else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                        setValue('attributes.className', curClass + ' ' + className, ele);\n                    }\n                }\n                else {\n                    if (!ele.classList.contains(className)) {\n                        ele.classList.add(className);\n                    }\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        if (ele && classList) {\n            var flag = isObject(ele);\n            var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n            if (canRemove) {\n                for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                    var className = classList_2[_b];\n                    if (flag) {\n                        var classes_1 = getValue('attributes.className', ele);\n                        var classArr = classes_1.split(' ');\n                        var index = classArr.indexOf(className);\n                        if (index !== -1) {\n                            classArr.splice(index, 1);\n                        }\n                        setValue('attributes.className', classArr.join(' '), ele);\n                    }\n                    else {\n                        ele.classList.remove(className);\n                    }\n                }\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    //tslint:disable:no-any\n    if (isObject(toElement)) {\n        VirtualDOM.prepend(fromElements, toElement);\n    }\n    else {\n        var docFrag = document.createDocumentFragment();\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n        toElement.insertBefore(docFrag, toElement.firstElementChild);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    if (isObject(toElement)) {\n        VirtualDOM.append(fromElements, toElement);\n    }\n    else {\n        var docFrag = document.createDocumentFragment();\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n        toElement.appendChild(docFrag);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nexport function detach(element) {\n    if (isObject(element)) {\n        return VirtualDOM.detach(element);\n    }\n    else {\n        var parentNode = element.parentNode;\n        if (parentNode) {\n            return parentNode.removeChild(element);\n        }\n    }\n}\n//tslint: enable:no-any\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nexport function remove(element) {\n    if (isObject(element)) {\n        VirtualDOM.detach(element);\n    }\n    else {\n        var parentNode = element.parentNode;\n        EventHandler.clearEvents(element);\n        parentNode.removeChild(element);\n    }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    if (ele) {\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (isObject(ele)) {\n                var iKey = key;\n                if (key === 'tabindex') {\n                    iKey = 'tabIndex';\n                }\n                ele.attributes[iKey] = attributes[key];\n            }\n            else {\n                ele.setAttribute(key, attributes[key]);\n            }\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    if (isObject(context) && needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector: selector, selectAll: false });\n    }\n    else {\n        selector = querySelectId(selector);\n        return context.querySelector(selector);\n    }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    if (isObject(context) && !needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector: selector, selectAll: true });\n    }\n    else {\n        selector = querySelectId(selector);\n        var nodeList = context.querySelectorAll(selector);\n        return nodeList;\n    }\n}\nfunction querySelectId(selector) {\n    var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n    if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n        var idList = selector.split(',');\n        for (var i = 0; i < idList.length; i++) {\n            var list = idList[i].split(' ');\n            for (var j = 0; j < list.length; j++) {\n                if (list[j].indexOf('#') > -1) {\n                    if (!list[j].match(/\\[.*\\]/)) {\n                        var splitId = list[j].split('#');\n                        if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n                            var setId = list[j].split('.');\n                            setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n                            list[j] = setId.join('.');\n                        }\n                    }\n                }\n            }\n            idList[i] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        if (isObject(element)) {\n            // tslint:disable-next-line:no-any\n            VirtualDOM.setStyleAttribute(element, attrs);\n        }\n        else {\n            Object.keys(attrs).forEach(function (key) {\n                // tslint:disable-next-line:no-any\n                element.style[key] = attrs[key];\n            });\n        }\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nexport function matches(element, selector) {\n    //tslint:disable-next-line\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n    if (isObject(ele)) {\n        if (innerHTML === '') {\n            ele.children = [];\n        }\n        else {\n            var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n            if (res.length) {\n                VirtualDOM.assignParent(res, ele);\n                ele.children = res;\n            }\n        }\n    }\n    else {\n        ele.innerHTML = innerHTML;\n    }\n}\n//tslint:disable-next-line\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        // tslint:disable-next-line:no-any\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n        else {\n            return { tagName: element.tagName, attributes: element.attributes };\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}