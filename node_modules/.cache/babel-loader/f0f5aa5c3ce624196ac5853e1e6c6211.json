{"ast":null,"code":"const initialState = {\n  job: [],\n  isLoading: false,\n  isFulfilled: false,\n  isRejected: false,\n  totalPage: '',\n  infoPage: '',\n  message: ''\n};\nconst job = (state = initialState, action) => {\n  switch (action.type) {\n    //GET_JOB\n    case 'GET_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'GET_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n        job: []\n      };\n    case 'GET_JOB_FULFILLED':\n      const {\n        location,\n        limit,\n        page,\n        sortby\n      } = action.payload;\n      return {\n        ...state,\n        isloading: false,\n        isError: false,\n        job: action.payload.result.data.data.result,\n        search: action.payload.search,\n        location,\n        limit,\n        page,\n        sortby,\n        orderby: action.payload.orderby,\n        totalPage: action.payload.result.data.data.infoPage.maxPage,\n        infoPage: action.payload.result.data.data.infoPage\n      };\n    case 'ADD_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'ADD_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    case 'ADD_JOB_FULFILLED':\n      console.log(action.payload.data);\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        message: action.payload.data.message,\n        job: [...state.job, action.payload.data.data]\n      };\n    case 'UPDATE_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'UPDATE_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    case 'UPDATE_JOB_FULFILLED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        message: action.payload.data.message,\n        job: state.job.map(i => i.id === action.id ? action.payload.data.data : i)\n      };\n    case 'DELETE_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'DELETE_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n        message: action.payload.data.message\n      };\n    case 'DELETE_JOB_FULFILLED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        message: action.payload.data.message,\n        job: state.job.filter(i => i.id !== action.id)\n      };\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport default job;","map":{"version":3,"names":["initialState","job","isLoading","isFulfilled","isRejected","totalPage","infoPage","message","state","action","type","isError","location","limit","page","sortby","payload","isloading","result","data","search","orderby","maxPage","console","log","map","i","id","filter"],"sources":["C:/Users/DELL/Downloads/GTSInterviewSchedulerComponent-main/GTSInterviewSchedulerComponent-main/src/redux/reducer/job.js"],"sourcesContent":["const initialState = {\n  job: [],\n  isLoading: false,\n  isFulfilled: false,\n  isRejected: false,\n  totalPage: '',\n  infoPage: '',\n  message: ''\n};\n\nconst job = (state = initialState, action) => {\n  switch (action.type) {\n    //GET_JOB\n    case 'GET_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'GET_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n        job: []\n      };\n    case 'GET_JOB_FULFILLED':\n      const { location, limit, page, sortby } = action.payload;\n      return {\n        ...state,\n        isloading: false,\n        isError: false,\n        job: action.payload.result.data.data.result,\n        search: action.payload.search,\n        location,\n        limit,\n        page,\n        sortby,\n        orderby: action.payload.orderby,\n        totalPage: action.payload.result.data.data.infoPage.maxPage,\n        infoPage: action.payload.result.data.data.infoPage\n      };\n\n    case 'ADD_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'ADD_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    case 'ADD_JOB_FULFILLED':\n      console.log(action.payload.data);\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        message: action.payload.data.message,\n        job: [...state.job, action.payload.data.data]\n      };\n\n    case 'UPDATE_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'UPDATE_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    case 'UPDATE_JOB_FULFILLED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        message: action.payload.data.message,\n        job: state.job.map(i =>\n          i.id === action.id ? action.payload.data.data : i\n        )\n      };\n\n    case 'DELETE_JOB_PENDING':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'DELETE_JOB_REJECTED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n        message: action.payload.data.message\n      };\n    case 'DELETE_JOB_FULFILLED':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        message: action.payload.data.message,\n        job: state.job.filter(i => i.id !== action.id)\n      };\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default job;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}