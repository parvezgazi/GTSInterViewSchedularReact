{"ast":null,"code":"/**\n * Template Engine Bridge\n */\nimport { compile as render } from './template';\nimport { createElement } from './dom';\nimport { isNullOrUndefined, isBlazor } from './util';\nvar HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\nvar HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\nexport var blazorTemplates = {};\nexport function getRandomId() {\n  return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n * @param  {string} templateString - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n//tslint:disable-next-line\nexport function compile(templateString, helper) {\n  var compiler = engineObj.compile(templateString, helper);\n  //tslint:disable-next-line\n  return function (data, component, propName, templateId, isStringTemplate, index, element) {\n    var result = compiler(data, component, propName, element);\n    var blazor = 'Blazor';\n    var blazorTemplateId = 'BlazorTemplateId';\n    if (isBlazor() && !isStringTemplate) {\n      var randomId = getRandomId();\n      var blazorId = templateId + randomId;\n      if (!blazorTemplates[templateId]) {\n        blazorTemplates[templateId] = [];\n      }\n      if (!isNullOrUndefined(index)) {\n        var keys = Object.keys(blazorTemplates[templateId][index]);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n          var key = keys_1[_i];\n          if (key !== blazorTemplateId && data[key]) {\n            blazorTemplates[templateId][index][key] = data[key];\n          }\n          if (key === blazorTemplateId) {\n            blazorId = blazorTemplates[templateId][index][key];\n          }\n        }\n      } else {\n        data[blazorTemplateId] = blazorId;\n        blazorTemplates[templateId].push(data);\n      }\n      // tslint:disable-next-line:no-any\n      return propName === 'rowTemplate' ? [createElement('tr', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })] :\n      // tslint:disable-next-line:no-any\n      [createElement('div', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })];\n    }\n    if (typeof result === 'string') {\n      if (HAS_SVG.test(result)) {\n        var ele = createElement('svg', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      } else {\n        var ele = createElement(HAS_ROW.test(result) ? 'table' : 'div', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      }\n    } else {\n      return result;\n    }\n  };\n}\nexport function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n  var blazor = 'Blazor';\n  if (isBlazor()) {\n    var ejsIntrop = 'sfBlazor';\n    window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);\n    if (isEmpty !== false) {\n      blazorTemplates[templateId] = [];\n    }\n  }\n}\nexport function resetBlazorTemplate(templateId, templateName, index) {\n  var templateDiv = document.getElementById(templateId);\n  if (templateDiv) {\n    // tslint:disable-next-line:no-any\n    var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n    for (var i = 0; i < innerTemplates.length; i++) {\n      var tempId = ' ';\n      if (!isNullOrUndefined(index)) {\n        tempId = innerTemplates[index].getAttribute('data-templateId');\n      } else {\n        tempId = innerTemplates[i].getAttribute('data-templateId');\n      }\n      var tempElement = document.getElementById(tempId);\n      if (tempElement) {\n        var length_1 = tempElement.childNodes.length;\n        for (var j = 0; j < length_1; j++) {\n          if (!isNullOrUndefined(index)) {\n            innerTemplates[index].appendChild(tempElement.childNodes[0]);\n            i = innerTemplates.length;\n          } else {\n            innerTemplates[i].appendChild(tempElement.childNodes[0]);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Set your custom template engine for template rendering.\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nexport function setTemplateEngine(classObj) {\n  engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nexport function getTemplateEngine() {\n  return engineObj.compile;\n}\n//Default Engine Class\nvar Engine = /** @class */function () {\n  function Engine() {}\n  Engine.prototype.compile = function (templateString, helper) {\n    if (helper === void 0) {\n      helper = {};\n    }\n    return render(templateString, helper);\n  };\n  return Engine;\n}();\nvar engineObj = {\n  compile: new Engine().compile\n};","map":{"version":3,"names":["compile","render","createElement","isNullOrUndefined","isBlazor","HAS_ROW","HAS_SVG","blazorTemplates","getRandomId","Math","random","toString","substr","templateString","helper","compiler","engineObj","data","component","propName","templateId","isStringTemplate","index","element","result","blazor","blazorTemplateId","randomId","blazorId","keys","Object","_i","keys_1","length","key","push","id","className","test","ele","innerHTML","childNodes","updateBlazorTemplate","templateName","comp","isEmpty","callBack","ejsIntrop","window","updateTemplate","resetBlazorTemplate","templateDiv","document","getElementById","innerTemplates","getElementsByClassName","i","tempId","getAttribute","tempElement","length_1","j","appendChild","setTemplateEngine","classObj","getTemplateEngine","Engine","prototype"],"sources":["C:/Users/DELL/Downloads/GTSInterviewSchedulerComponent-main/GTSInterviewSchedulerComponent-main/node_modules/@syncfusion/ej2-buttons/node_modules/@syncfusion/ej2-base/src/template-engine.js"],"sourcesContent":["/**\n * Template Engine Bridge\n */\nimport { compile as render } from './template';\nimport { createElement } from './dom';\nimport { isNullOrUndefined, isBlazor } from './util';\nvar HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\nvar HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\nexport var blazorTemplates = {};\nexport function getRandomId() {\n    return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n * @param  {string} templateString - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n//tslint:disable-next-line\nexport function compile(templateString, helper) {\n    var compiler = engineObj.compile(templateString, helper);\n    //tslint:disable-next-line\n    return function (data, component, propName, templateId, isStringTemplate, index, element) {\n        var result = compiler(data, component, propName, element);\n        var blazor = 'Blazor';\n        var blazorTemplateId = 'BlazorTemplateId';\n        if (isBlazor() && !isStringTemplate) {\n            var randomId = getRandomId();\n            var blazorId = templateId + randomId;\n            if (!blazorTemplates[templateId]) {\n                blazorTemplates[templateId] = [];\n            }\n            if (!isNullOrUndefined(index)) {\n                var keys = Object.keys(blazorTemplates[templateId][index]);\n                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                    var key = keys_1[_i];\n                    if (key !== blazorTemplateId && data[key]) {\n                        blazorTemplates[templateId][index][key] = data[key];\n                    }\n                    if (key === blazorTemplateId) {\n                        blazorId = blazorTemplates[templateId][index][key];\n                    }\n                }\n            }\n            else {\n                data[blazorTemplateId] = blazorId;\n                blazorTemplates[templateId].push(data);\n            }\n            // tslint:disable-next-line:no-any\n            return propName === 'rowTemplate' ? [createElement('tr', { id: blazorId, className: 'e-blazor-template' })] :\n                // tslint:disable-next-line:no-any\n                [createElement('div', { id: blazorId, className: 'e-blazor-template' })];\n        }\n        if (typeof result === 'string') {\n            if (HAS_SVG.test(result)) {\n                var ele = createElement('svg', { innerHTML: result });\n                return ele.childNodes;\n            }\n            else {\n                var ele = createElement((HAS_ROW.test(result) ? 'table' : 'div'), { innerHTML: result });\n                return ele.childNodes;\n            }\n        }\n        else {\n            return result;\n        }\n    };\n}\nexport function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n    var blazor = 'Blazor';\n    if (isBlazor()) {\n        var ejsIntrop = 'sfBlazor';\n        window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);\n        if (isEmpty !== false) {\n            blazorTemplates[templateId] = [];\n        }\n    }\n}\nexport function resetBlazorTemplate(templateId, templateName, index) {\n    var templateDiv = document.getElementById(templateId);\n    if (templateDiv) {\n        // tslint:disable-next-line:no-any\n        var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n        for (var i = 0; i < innerTemplates.length; i++) {\n            var tempId = ' ';\n            if (!isNullOrUndefined(index)) {\n                tempId = innerTemplates[index].getAttribute('data-templateId');\n            }\n            else {\n                tempId = innerTemplates[i].getAttribute('data-templateId');\n            }\n            var tempElement = document.getElementById(tempId);\n            if (tempElement) {\n                var length_1 = tempElement.childNodes.length;\n                for (var j = 0; j < length_1; j++) {\n                    if (!isNullOrUndefined(index)) {\n                        innerTemplates[index].appendChild(tempElement.childNodes[0]);\n                        i = innerTemplates.length;\n                    }\n                    else {\n                        innerTemplates[i].appendChild(tempElement.childNodes[0]);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Set your custom template engine for template rendering.\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nexport function setTemplateEngine(classObj) {\n    engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nexport function getTemplateEngine() {\n    return engineObj.compile;\n}\n//Default Engine Class\nvar Engine = /** @class */ (function () {\n    function Engine() {\n    }\n    Engine.prototype.compile = function (templateString, helper) {\n        if (helper === void 0) { helper = {}; }\n        return render(templateString, helper);\n    };\n    return Engine;\n}());\nvar engineObj = { compile: new Engine().compile };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}