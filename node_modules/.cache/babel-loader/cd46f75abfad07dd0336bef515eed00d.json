{"ast":null,"code":"/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n  queryString += String.fromCharCode(keyCode);\n  setTimeout(function () {\n    queryString = '';\n  }, 1000);\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n  if (prevElementId === elementId && prevString === queryString) {\n    for (var i = 0; i < matches.length; i++) {\n      if (matches[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n    }\n    index = index + 1;\n    return matches[index] ? matches[index] : matches[0];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches = [];\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n      if (i === -1) {\n        index = 0;\n      } else {\n        index = i;\n      }\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n      if (text.substr(0, strLength) === queryString) {\n        matches.push(listItems[index]);\n      }\n      i++;\n    } while (i !== selectedIndex);\n    prevString = queryString;\n    prevElementId = elementId;\n    return matches[0];\n  }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var item = itemsData[i];\n      var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr || searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr || searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text)) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          item: item,\n          index: i\n        };\n      }\n    }\n    return itemData;\n  }\n  return itemData;\n}\nexport function resetIncrementalSearchValues(elementId) {\n  if (prevElementId === elementId) {\n    prevElementId = '';\n    prevString = '';\n    queryString = '';\n    matches = [];\n  }\n}","map":{"version":3,"names":["queryString","prevString","matches","activeClass","prevElementId","incrementalSearch","keyCode","items","selectedIndex","ignoreCase","elementId","String","fromCharCode","setTimeout","index","toLowerCase","i","length","classList","contains","listItems","strLength","text","item","innerText","substr","push","Search","inputVal","searchType","undefined","itemData","queryStr","toLocaleLowerCase","itemsData","textContent","replace","RegExp","test","resetIncrementalSearchValues"],"sources":["C:/Users/DELL/Downloads/GTSInterviewSchedulerComponent-main/GTSInterviewSchedulerComponent-main/node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js"],"sourcesContent":["/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n    queryString += String.fromCharCode(keyCode);\n    setTimeout(function () {\n        queryString = '';\n    }, 1000);\n    var index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevElementId === elementId && prevString === queryString) {\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        return matches[index] ? matches[index] : matches[0];\n    }\n    else {\n        var listItems = items;\n        var strLength = queryString.length;\n        var text = void 0;\n        var item = void 0;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        var i = selectedIndex;\n        matches = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            if (i === -1) {\n                index = 0;\n            }\n            else {\n                index = i;\n            }\n            item = listItems[index];\n            text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            if (text.substr(0, strLength) === queryString) {\n                matches.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        prevElementId = elementId;\n        return matches[0];\n    }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase) {\n    var listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    var itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        var strLength = inputVal.length;\n        var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            var item = itemsData[i];\n            var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) || (searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr) || (searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text))) {\n                itemData.item = item;\n                itemData.index = i;\n                return { item: item, index: i };\n            }\n        }\n        return itemData;\n    }\n    return itemData;\n}\nexport function resetIncrementalSearchValues(elementId) {\n    if (prevElementId === elementId) {\n        prevElementId = '';\n        prevString = '';\n        queryString = '';\n        matches = [];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}