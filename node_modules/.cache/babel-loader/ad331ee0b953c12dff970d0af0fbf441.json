{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Query, DataManager } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and data source.\n *\n * @private\n */\nvar Data = /** @class */function () {\n  /**\n   * Constructor for data module\n   *\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n   * @param {Query} query Accepts the query to process the data\n   * @private\n   */\n  function Data(dataSource, query) {\n    this.initDataManager(dataSource, query);\n  }\n  /**\n   * The function used to initialize dataManager and query\n   *\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n   * @param {Query} query Accepts the query to process the data\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @param {Date} startDate Accepts the start date\n   * @param {Date} endDate Accepts the end date\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.generateQuery = function (startDate, endDate) {\n    var query = this.query.clone();\n    if (startDate) {\n      query.addParams('StartDate', startDate.toISOString());\n    }\n    if (endDate) {\n      query.addParams('EndDate', endDate.toISOString());\n    }\n    return query;\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   *\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.getData = function (query) {\n    return this.dataManager.executeQuery(query);\n  };\n  /**\n   * To destroy the crud module.\n   *\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.destroy = function () {\n    this.dataManager = null;\n    this.query = null;\n  };\n  return Data;\n}();\nexport { Data };","map":{"version":3,"names":["Query","DataManager","Data","dataSource","query","initDataManager","prototype","dataManager","generateQuery","startDate","endDate","clone","addParams","toISOString","getData","executeQuery","destroy"],"sources":["C:/Users/DELL/Downloads/GTSInterviewSchedulerComponent-main/GTSInterviewSchedulerComponent-main/node_modules/@syncfusion/ej2-schedule/src/schedule/actions/data.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Query, DataManager } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and data source.\n *\n * @private\n */\nvar Data = /** @class */ (function () {\n    /**\n     * Constructor for data module\n     *\n     * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n     * @param {Query} query Accepts the query to process the data\n     * @private\n     */\n    function Data(dataSource, query) {\n        this.initDataManager(dataSource, query);\n    }\n    /**\n     * The function used to initialize dataManager and query\n     *\n     * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n     * @param {Query} query Accepts the query to process the data\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.initDataManager = function (dataSource, query) {\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n        this.query = query instanceof Query ? query : new Query();\n    };\n    /**\n     * The function used to generate updated Query from schedule model\n     *\n     * @param {Date} startDate Accepts the start date\n     * @param {Date} endDate Accepts the end date\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.generateQuery = function (startDate, endDate) {\n        var query = this.query.clone();\n        if (startDate) {\n            query.addParams('StartDate', startDate.toISOString());\n        }\n        if (endDate) {\n            query.addParams('EndDate', endDate.toISOString());\n        }\n        return query;\n    };\n    /**\n     * The function used to get dataSource by executing given Query\n     *\n     * @param  {Query} query - A Query that specifies to generate dataSource\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getData = function (query) {\n        return this.dataManager.executeQuery(query);\n    };\n    /**\n     * To destroy the crud module.\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.destroy = function () {\n        this.dataManager = null;\n        this.query = null;\n    };\n    return Data;\n}());\nexport { Data };\n"],"mappings":"AAAA;AACA,SAASA,KAAK,EAAEC,WAAW,QAAQ,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,aAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,IAAIA,CAACC,UAAU,EAAEC,KAAK,EAAE;IAC7B,IAAI,CAACC,eAAe,CAACF,UAAU,EAAEC,KAAK,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,IAAI,CAACI,SAAS,CAACD,eAAe,GAAG,UAAUF,UAAU,EAAEC,KAAK,EAAE;IAC1D,IAAI,CAACG,WAAW,GAAGJ,UAAU,YAAYF,WAAW,GAAGE,UAAU,GAAG,IAAIF,WAAW,CAACE,UAAU,CAAC;IAC/F,IAAI,CAACC,KAAK,GAAGA,KAAK,YAAYJ,KAAK,GAAGI,KAAK,GAAG,IAAIJ,KAAK,CAAC,CAAC;EAC7D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,IAAI,CAACI,SAAS,CAACE,aAAa,GAAG,UAAUC,SAAS,EAAEC,OAAO,EAAE;IACzD,IAAIN,KAAK,GAAG,IAAI,CAACA,KAAK,CAACO,KAAK,CAAC,CAAC;IAC9B,IAAIF,SAAS,EAAE;MACXL,KAAK,CAACQ,SAAS,CAAC,WAAW,EAAEH,SAAS,CAACI,WAAW,CAAC,CAAC,CAAC;IACzD;IACA,IAAIH,OAAO,EAAE;MACTN,KAAK,CAACQ,SAAS,CAAC,SAAS,EAAEF,OAAO,CAACG,WAAW,CAAC,CAAC,CAAC;IACrD;IACA,OAAOT,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIF,IAAI,CAACI,SAAS,CAACQ,OAAO,GAAG,UAAUV,KAAK,EAAE;IACtC,OAAO,IAAI,CAACG,WAAW,CAACQ,YAAY,CAACX,KAAK,CAAC;EAC/C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIF,IAAI,CAACI,SAAS,CAACU,OAAO,GAAG,YAAY;IACjC,IAAI,CAACT,WAAW,GAAG,IAAI;IACvB,IAAI,CAACH,KAAK,GAAG,IAAI;EACrB,CAAC;EACD,OAAOF,IAAI;AACf,CAAC,CAAC,CAAE;AACJ,SAASA,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module"}